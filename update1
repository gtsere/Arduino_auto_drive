
#include <ArduinoJson.h>

class Metrics
{
  public:
    long rightDuration, frontDuration, leftDuration;
    int rightDistance, frontDistance, leftDistance;
    String labelRD="rightDuration",labelFD="frontDuration",labelLD="leftDistance";
    String toString()
    {
      return (labelRD+rightDistance+labelFD+frontDistance+labelLD+leftDistance);
    };
};

// Input pins for motors. Side: Right/Left Cable Color: Red/Black
const int in_RR = 6 ;
const int in_RK = 9 ;
const int in_LR = 11 ;
const int in_LK = 10 ;

// define sensor pins t->trig e->echo
const int rightTPin = 2;
const int rightEPin = 3;
const int frontTPin = 4;
const int frontEPin = 5;
const int leftTPin = 7;
const int leftEPin = 8;

// defines variables//For providing logic to L298 IC to choose the direction of the DC motor
long rightDuration, frontDuration, leftDuration;
Metrics *m=new Metrics();

void getRightDistance()
{
  // Clears the trigPin
  digitalWrite(rightTPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(rightTPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(rightTPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  rightDuration = pulseIn(rightEPin, HIGH);
  // Calculating the distance
  m->rightDistance = rightDuration * 0.034 / 2;
}
void getFrontDistance()
{
  // Clears the trigPin
  digitalWrite(frontTPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(frontTPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(frontTPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  frontDuration = pulseIn(frontEPin, HIGH);
  // Calculating the distance
  m->frontDistance = frontDuration * 0.034 / 2;
}
void getLeftDistance()
{
  // Clears the trigPin
  digitalWrite(leftTPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(leftTPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(leftTPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  leftDuration = pulseIn(leftEPin, HIGH);
  // Calculating the distance
  m->leftDistance = leftDuration * 0.034 / 2;
}

void turnR()
{
  //TURN LIKE TANK clockwise
  digitalWrite(in_RR, LOW) ;
  digitalWrite(in_RK, HIGH) ;
  digitalWrite(in_LK, LOW) ;
  digitalWrite(in_LR, HIGH) ;
}

void turnL()
{
  //TURN LIKE TANK clockwise
  digitalWrite(in_RR, HIGH) ;
  digitalWrite(in_RK, LOW) ;
  digitalWrite(in_LK, HIGH) ;
  digitalWrite(in_LR, LOW) ;
}
void forward()
{
  //FORWARD
  digitalWrite(in_RR, HIGH) ;
  digitalWrite(in_RK, LOW) ;
  digitalWrite(in_LR, HIGH) ;
  digitalWrite(in_LK, LOW) ;
}
void brake()
{
  //For brake
  digitalWrite(in_RR, LOW) ;
  digitalWrite(in_RK, LOW) ;
  digitalWrite(in_LR, LOW) ;
  digitalWrite(in_LK, LOW) ;
}

void setup()
{
  pinMode(in_RR, OUTPUT) ; //Logic pins are also set as output
  pinMode(in_RK, OUTPUT) ;
  pinMode(in_LR, OUTPUT) ;
  pinMode(in_LK, OUTPUT) ;

  pinMode(rightTPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(rightEPin, INPUT); // Sets the echoPin as an Input
  pinMode(frontTPin, OUTPUT);
  pinMode(frontEPin, INPUT);
  pinMode(leftTPin, OUTPUT);
  pinMode(leftEPin, INPUT);
  Serial.begin(9600); // Starts the serial communication
}
void createJson()
{
 const int capacity = 6*JSON_OBJECT_SIZE(3);
  StaticJsonDocument<capacity> dict;
  //making the dictionary object
  dict[m->labelFD].set(m->frontDistance);
  dict[m->labelRD].set(m->rightDistance);
  dict[m->labelLD].set(m->leftDistance);
  JsonObject json = dict.as<JsonObject>();
  String output;
  serializeJson(json, output);
  Serial.println(output);  
}
// DeserializationError::Ok: the deserialization was successful.
//• DeserializationError::IncompleteInput: the input was valid but ended prematurely, or it was empty; this code often means that a timeout occurred.
//• DeserializationError::InvalidInput: the input was not a valid JSON document.
//• DeserializationError::NoMemory: the JsonDocument was too small
//• DeserializationError::NotSupported: the input document was valid, but it contains features that are not supported by the library.
//• DeserializationError::TooDeep: the input was valid, but it contained too many

void readJson()
{
//  Serial.println("aaaaaa");
  String input;
  
  if (Serial.available() > 0) 
  { //reading from serial device
    input = Serial.readString();
    const int capacity = 6*JSON_OBJECT_SIZE(3);
    Serial.print("The following char was received: ");
    Serial.println(input);
    DynamicJsonDocument dict(capacity);
    DeserializationError err = deserializeJson(dict, input);
    m->rightDistance = dict[m->labelRD].as<int>();
    m->frontDistance = dict[m->labelFD].as<int>();
    m->leftDistance  = dict[m->labelLD].as<int>();
  }
}
void loop()
{
     getRightDistance();
//  Serial.print("Right sensor distance: ");
//  Serial.print(m->rightDistance);
//  Serial.println(" cm");

    getFrontDistance();
//  Serial.print("Front sensor distance: ");
//  Serial.print(m->frontDistance);
//  Serial.println(" cm");

     getLeftDistance();
//  Serial.print("Left sensor distance: ");
//  Serial.print(m->leftDistance);
//  Serial.println(" cm");
createJson();
//  createJson();
//  readJson();
//  delay(100) ;
//Serial.println("Hello");
//  if (frontDistance > 8) {
//    forward();
//    Serial.println("Going forward");
//  }
//  else {
//    brake();
//    if (rightDistance > 20){
//      turnR();
//      Serial.println("Turning right >");
//    }
//    else if (leftDistance > 20){
//      turnL();
//      Serial.println("Turning left <");
//    }
//  }

}
